"""
Ribbon AI Interview API Client

This module provides a client for interacting with the Ribbon AI Interview API.
It supports creating interview flows, creating interviews, and retrieving interview data.
"""

import os
import requests
from typing import List, Dict, Optional, Any
from dataclasses import dataclass
from dotenv import load_dotenv

@dataclass
class InterviewFlow:
    """Data class for interview flow configuration"""
    org_name: str
    title: str
    questions: List[str]
    interview_flow_id: Optional[str] = None  # Auto-generated by API if not provided
    voice_id: str = "11labs-Kate"
    language: str = "en-US"
    company_logo_url: Optional[str] = None
    additional_info: Optional[str] = None
    interview_type: str = "general"  # Must be "recruitment" or "general"
    is_video_enabled: bool = False
    is_phone_call_enabled: bool = True
    is_doc_upload_enabled: bool = False
    redirect_url: Optional[str] = None
    webhook_url: Optional[str] = None


@dataclass
class InterviewConfig:
    """Data class for interview configuration"""
    interview_flow_id: str
    interviewee_email_address: Optional[str] = None
    interviewee_first_name: Optional[str] = None
    interviewee_last_name: Optional[str] = None


class RibbonClient:
    """Client for interacting with the Ribbon AI Interview API"""
    
    def __init__(self, api_key: Optional[str] = None, enable_advanced_features: bool = False):
        """
        Initialize the Ribbon client
        
        Args:
            api_key: Ribbon API key. If not provided, will try to load from .env file
            enable_advanced_features: Whether to enable advanced features (requires higher plan tier)
        """
        # Load environment variables
        load_dotenv()
        
        self.api_key = api_key or os.getenv('RIBBON_API_KEY')
        if not self.api_key:
            raise ValueError("API key is required. Provide it directly or set RIBBON_API_KEY in .env file")
        
        self.base_url = "https://app.ribbon.ai/be-api"
        self.headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json",
            "accept": "application/json"
        }
        self.enable_advanced_features = enable_advanced_features
    
    def create_interview_flows(self, interview_flows: List[InterviewFlow]) -> Dict[str, Any]:
        """
        Create one or more interview flows
        
        Args:
            interview_flows: List of InterviewFlow objects
            
        Returns:
            API response
            
        Raises:
            requests.RequestException: If the API request fails
        """
        url = f"{self.base_url}/v1/interview-flows"
        
        # The API only accepts one flow at a time and expects direct fields
        # If multiple flows are provided, we'll create them one by one
        results = []
        
        for flow in interview_flows:
            # Create payload with only the required fields for now
            # The API plan may have limitations on optional fields
            payload = {
                "org_name": flow.org_name,
                "title": flow.title,
                "questions": flow.questions
            }
            
            # Only add interview_type if it's explicitly set to recruitment
            if flow.interview_type == "recruitment":
                payload["interview_type"] = flow.interview_type
            
            # Add optional fields if advanced features are enabled
            if self.enable_advanced_features:
                if flow.voice_id != "11labs-Kate":
                    payload["voice_id"] = flow.voice_id
                if flow.language != "en-US":
                    payload["language"] = flow.language
                if flow.company_logo_url is not None:
                    payload["company_logo_url"] = flow.company_logo_url
                if flow.additional_info is not None:
                    payload["additional_info"] = flow.additional_info
                if flow.is_video_enabled:
                    payload["is_video_enabled"] = flow.is_video_enabled
                if not flow.is_phone_call_enabled:
                    payload["is_phone_call_enabled"] = flow.is_phone_call_enabled
                if flow.is_doc_upload_enabled:
                    payload["is_doc_upload_enabled"] = flow.is_doc_upload_enabled
                if flow.redirect_url is not None:
                    payload["redirect_url"] = flow.redirect_url
                if flow.webhook_url is not None:
                    payload["webhook_url"] = flow.webhook_url
            
            response = requests.post(url, headers=self.headers, json=payload)
            response.raise_for_status()
            result = response.json()
            
            # Store the auto-generated interview_flow_id back to the flow object
            if "interview_flow_id" in result:
                flow.interview_flow_id = result["interview_flow_id"]
            
            results.append(result)
        
        # Return single result if only one flow, otherwise return list
        return results[0] if len(results) == 1 else results
    
    def create_interview(self, interview_config: InterviewConfig) -> Dict[str, Any]:
        """
        Create a new interview
        
        Args:
            interview_config: InterviewConfig object with interview details
            
        Returns:
            Dictionary containing interview_id, interview_link, and optional hint
            
        Raises:
            requests.RequestException: If the API request fails
        """
        url = f"{self.base_url}/v1/interviews"
        
        payload = {
            "interview_flow_id": interview_config.interview_flow_id,
            "interviewee_email_address": interview_config.interviewee_email_address,
            "interviewee_first_name": interview_config.interviewee_first_name,
            "interviewee_last_name": interview_config.interviewee_last_name
        }
        
        response = requests.post(url, headers=self.headers, json=payload)
        response.raise_for_status()
        return response.json()
    
    def get_interview(self, interview_id: str) -> Dict[str, Any]:
        """
        Retrieve interview data and results
        
        Args:
            interview_id: The ID of the interview to retrieve
            
        Returns:
            Complete interview data including transcript, status, and recordings
            
        Raises:
            requests.RequestException: If the API request fails
        """
        url = f"{self.base_url}/v1/interviews/{interview_id}"
        
        response = requests.get(url, headers=self.headers)
        response.raise_for_status()
        return response.json()
    
    def get_interview_status(self, interview_id: str) -> str:
        """
        Get just the status of an interview
        
        Args:
            interview_id: The ID of the interview
            
        Returns:
            Status string ("incomplete" or "completed")
        """
        interview_data = self.get_interview(interview_id)
        return interview_data.get("status", "unknown")
    
    def get_interview_transcript(self, interview_id: str) -> Optional[str]:
        """
        Get the transcript of a completed interview
        
        Args:
            interview_id: The ID of the interview
            
        Returns:
            Full transcript text or None if interview is incomplete
        """
        interview_data = self.get_interview(interview_id)
        if interview_data.get("status") == "completed":
            return interview_data.get("transcript")
        return None
    
    def get_interview_audio_url(self, interview_id: str) -> Optional[str]:
        """
        Get the audio recording URL of a completed interview
        
        Args:
            interview_id: The ID of the interview
            
        Returns:
            Audio URL or None if interview is incomplete
        """
        interview_data = self.get_interview(interview_id)
        if interview_data.get("status") == "completed":
            return interview_data.get("audio_url")
        return None


# Convenience functions for quick usage
def create_simple_interview_flow(
    org_name: str,
    title: str,
    questions: List[str],
    **kwargs
) -> Dict[str, Any]:
    """
    Create a simple interview flow with default settings
    
    Args:
        org_name: Organization name
        title: Interview title
        questions: List of questions to ask
        **kwargs: Additional optional parameters
    
    Returns:
        API response
    """
    client = RibbonClient()
    flow = InterviewFlow(
        org_name=org_name,
        title=title,
        questions=questions,
        **kwargs
    )
    return client.create_interview_flows([flow])


def start_interview(
    interview_flow_id: str,
    interviewee_email: Optional[str] = None,
    interviewee_first_name: Optional[str] = None,
    interviewee_last_name: Optional[str] = None
) -> Dict[str, Any]:
    """
    Start a new interview
    
    Args:
        interview_flow_id: The flow ID to use for the interview
        interviewee_email: Optional email address
        interviewee_first_name: Optional first name
        interviewee_last_name: Optional last name
    
    Returns:
        Dictionary with interview_id and interview_link
    """
    client = RibbonClient()
    config = InterviewConfig(
        interview_flow_id=interview_flow_id,
        interviewee_email_address=interviewee_email,
        interviewee_first_name=interviewee_first_name,
        interviewee_last_name=interviewee_last_name
    )
    return client.create_interview(config)


if __name__ == "__main__":
    # Example usage
    try:
        # Create a sample interview flow
        sample_flow = InterviewFlow(
            org_name="Sample Company",
            title="Sample Interview",
            questions=[
                "Tell me about yourself.",
                "What are your career goals?",
                "What motivates you in your work?"
            ],
            additional_info="This is a sample interview for testing purposes."
        )
        
        client = RibbonClient()
        
        # Create the flow
        print("Creating interview flow...")
        flow_response = client.create_interview_flows([sample_flow])
        print(f"Flow created with ID: {sample_flow.interview_flow_id}")
        print(f"Response: {flow_response}")
        
        # Start an interview
        print("\nStarting interview...")
        interview_response = client.create_interview(
            InterviewConfig(
                interview_flow_id=sample_flow.interview_flow_id,
                interviewee_email_address="test@example.com",
                interviewee_first_name="John",
                interviewee_last_name="Doe"
            )
        )
        print(f"Interview started: {interview_response}")
        
        # Get interview link
        interview_link = interview_response.get("interview_link")
        interview_id = interview_response.get("interview_id")
        print(f"Interview Link: {interview_link}")
        print(f"Interview ID: {interview_id}")
        
    except Exception as e:
        print(f"Error: {e}")
